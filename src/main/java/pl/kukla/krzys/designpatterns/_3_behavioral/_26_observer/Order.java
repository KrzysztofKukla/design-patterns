package pl.kukla.krzys.designpatterns._3_behavioral._26_observer;

import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.util.ArrayList;
import java.util.List;

/**
 * This is our Subject - Observable ( oberwowany )
 * whenever something change in this object, then it trigger notification about that in Observers objects ( Listeners )
 */
@Getter
@RequiredArgsConstructor
@ToString(exclude = "observers")
public class Order {
    private final String id;

    //avoid double and use BigDecimal, BigInteger to calculate values
    //cost of items
    private double itemCost;

    //no of items
    private int count;

    private double totalCost;

    @Setter
    //discount ( rabat )
    private double discount;

    @Setter
    //shipping cost ( koszt wysy≈Çki )
    private double shippingCost;

    private List<OrderObserver> observers = new ArrayList<>();

    public void addItem(double price) {
        itemCost += price;
        count++;
        //here we notify about update all registered observers
        observers.forEach(o -> o.updated(this));
    }

    //register Order to Observer
    public void attach(OrderObserver orderObserver) {
        observers.add(orderObserver);
    }

    //deregister object
    public void detach(OrderObserver orderObserver) {
        observers.remove(orderObserver);
    }

    public double getTotalCost() {
        return itemCost - discount + shippingCost;
    }

}
